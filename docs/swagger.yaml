basePath: /
definitions:
  api.createAccountRequest:
    properties:
      currency:
        description: This field is required and must be a valid currency code.
        type: string
    required:
    - currency
    type: object
  api.createUserRequest:
    description: Create user request payload
    properties:
      email:
        description: Email, required, must be valid
        type: string
      full_name:
        description: Full name, required
        type: string
      password:
        description: Password, min 6 chars
        minLength: 6
        type: string
      username:
        description: Alphanumeric username, required
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  api.loginUserRequest:
    description: Login request payload
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.loginUserResponse:
    description: Login response payload
    properties:
      access_token:
        description: JWT/Paseto token
        type: string
      user:
        allOf:
        - $ref: '#/definitions/api.userResponse'
        description: User details
    type: object
  api.transferRequest:
    description: Transfer request payload
    properties:
      amount:
        description: Transfer amount, must be > 0
        type: integer
      currency:
        description: Currency, validated by custom validator
        type: string
      from_account_id:
        description: ID of sender account, must be > 0
        minimum: 1
        type: integer
      to_account_id:
        description: ID of receiver account, must be > 0
        minimum: 1
        type: integer
    required:
    - amount
    - currency
    - from_account_id
    - to_account_id
    type: object
  api.userResponse:
    description: User response payload
    properties:
      created_at:
        description: Timestamp of user creation
        type: string
      email:
        description: Email of user
        type: string
      full_name:
        description: Full name of user
        type: string
      password_changed_at:
        description: Timestamp of last password change
        type: string
      username:
        description: Username of user
        type: string
    type: object
  db.Account:
    properties:
      balance:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      id:
        type: integer
      owner:
        type: string
    type: object
  db.Entry:
    properties:
      account_id:
        type: integer
      amount:
        description: can be positive or negative
        type: integer
      created_at:
        type: string
      id:
        type: integer
    type: object
  db.Transfer:
    properties:
      amount:
        description: must be positive
        type: integer
      created_at:
        type: string
      from_account_id:
        type: integer
      id:
        type: integer
      to_account_id:
        type: integer
    type: object
  db.TransferTxResult:
    properties:
      from_account:
        $ref: '#/definitions/db.Account'
      from_entry:
        $ref: '#/definitions/db.Entry'
      to_account:
        $ref: '#/definitions/db.Account'
      to_entry:
        $ref: '#/definitions/db.Entry'
      transfer:
        $ref: '#/definitions/db.Transfer'
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: nahasat.nibir@gmail.com
    name: Nahasat Nibir
  description: |-
    A lightweight boilerplate for building RESTful APIs with Golang (Fiber) and PostgreSQL.
    This project provides a clean and modular backend setup with Docker support for easy local development.
    Designed as a starting point for rapid prototyping or learning, without cloud deployment overhead.

    **Developer:** Nahasat Nibir (Software Developer)
    **LinkedIn:** https://www.linkedin.com/in/nibir-1/
    **Portfolio:** https://github.com/nibir1 | https://www.artstation.com/nibir
  title: Go-Fiber-Postgres-REST-Boilerplate
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of accounts for the authenticated user
      parameters:
      - description: Page number
        in: query
        name: page_id
        required: true
        type: integer
      - description: Items per page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: List accounts
      tags:
      - Accounts
    post:
      consumes:
      - application/json
      description: Creates a new bank account for the authenticated user
      parameters:
      - description: Account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/api.createAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Account'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new account
      tags:
      - Accounts
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an account by ID. Must belong to authenticated user.
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete account
      tags:
      - Accounts
    get:
      consumes:
      - application/json
      description: Retrieves an account by ID. Must belong to authenticated user.
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Account'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get account by ID
      tags:
      - Accounts
  /transfers:
    post:
      consumes:
      - application/json
      description: Transfers a specified amount between two accounts if they belong
        to the authenticated user and share the same currency.
      parameters:
      - description: Transfer details
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/api.transferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TransferTxResult'
      security:
      - ApiKeyAuth: []
      summary: Create a new money transfer
      tags:
      - Transfers
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user with username, password, full name, and email
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
      summary: Register a new user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials and returns a JWT access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
      summary: Log in a user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
